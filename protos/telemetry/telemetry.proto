syntax = "proto3";

package mavsdk.rpc.telemetry;

option java_package = "io.mavsdk.telemetry";
option java_outer_classname = "TelemetryProto";

/*
 * Allow users to get vehicle telemetry and state information
 * (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
 */
service TelemetryService {
    // Subscribe to 'position' updates.
    rpc SubscribePosition(SubscribePositionRequest) returns(stream PositionResponse) {}
    // Subscribe to 'home position' updates.
    rpc SubscribeHome(SubscribeHomeRequest) returns(stream HomeResponse) {}
    // Subscribe to in-air updates.
    rpc SubscribeInAir(SubscribeInAirRequest) returns(stream InAirResponse) {}
    // Subscribe to landed state updates
    rpc SubscribeLandedState(SubscribeLandedStateRequest) returns(stream LandedStateResponse) {}
    // Subscribe to armed updates.
    rpc SubscribeArmed(SubscribeArmedRequest) returns(stream ArmedResponse) {}
    // Subscribe to 'attitude' updates (quaternion).
    rpc SubscribeAttitudeQuaternion(SubscribeAttitudeQuaternionRequest) returns(stream AttitudeQuaternionResponse) {}
    // Subscribe to 'attitude' updates (euler).
    rpc SubscribeAttitudeEuler(SubscribeAttitudeEulerRequest) returns(stream AttitudeEulerResponse) {}
    // Subscribe to 'attitude' updates (angular velocity)
    rpc SubscribeAttitudeAngularVelocityBody(SubscribeAttitudeAngularVelocityBodyRequest) returns(stream AttitudeAngularVelocityBodyResponse) {}
    // Subscribe to 'camera attitude' updates (quaternion).
    rpc SubscribeCameraAttitudeQuaternion(SubscribeCameraAttitudeQuaternionRequest) returns(stream CameraAttitudeQuaternionResponse) {}
    // Subscribe to 'camera attitude' updates (euler).
    rpc SubscribeCameraAttitudeEuler(SubscribeCameraAttitudeEulerRequest) returns(stream CameraAttitudeEulerResponse) {}
    // Subscribe to 'ground speed' updates (NED).
    rpc SubscribeGroundSpeedNed(SubscribeGroundSpeedNedRequest) returns(stream GroundSpeedNedResponse) {}
    // Subscribe to 'GPS info' updates.
    rpc SubscribeGpsInfo(SubscribeGpsInfoRequest) returns(stream GpsInfoResponse) {}
    // Subscribe to 'Distance sensor' updates.
    rpc SubscribeDistanceSensor(SubscribeDistanceSensorRequest) returns(stream DistanceSensorResponse) {}
    // Subscribe to 'IMU reading NED' updates.
    rpc SubscribeImuReadingNed(SubscribeImuReadingNedRequest) returns(stream ImuReadingNedResponse) {}
    // Subscribe to 'battery' updates.
    rpc SubscribeBattery(SubscribeBatteryRequest) returns(stream BatteryResponse) {}
    // Subscribe to 'battery current' updates.
    rpc SubscribeBatteryStatus(SubscribeBatteryStatusRequest) returns(stream BatteryStatusResponse) {}
    // Subscribe to 'flight mode' updates.
    rpc SubscribeFlightMode(SubscribeFlightModeRequest) returns(stream FlightModeResponse) {}
    // Subscribe to 'mode' updates.
    rpc SubscribeModeInfo(SubscribeModeInfoRequest) returns(stream ModeInfoResponse) {}
    // Subscribe to 'health' updates.
    rpc SubscribeHealth(SubscribeHealthRequest) returns(stream HealthResponse) {}
    // Subscribe to 'RC status' updates.
    rpc SubscribeRcStatus(SubscribeRcStatusRequest) returns(stream RcStatusResponse) {}
    // Subscribe to 'status text' updates.
    rpc SubscribeStatusText(SubscribeStatusTextRequest) returns(stream StatusTextResponse) {}
    // Subscribe to 'actuator control target' updates.
    rpc SubscribeActuatorControlTarget(SubscribeActuatorControlTargetRequest) returns(stream ActuatorControlTargetResponse) {}
    // Subscribe to 'actuator output status' updates.
    rpc SubscribeActuatorOutputStatus(SubscribeActuatorOutputStatusRequest) returns(stream ActuatorOutputStatusResponse) {}
    // Subscribe to 'odometry' updates.
    rpc SubscribeOdometry(SubscribeOdometryRequest) returns(stream OdometryResponse) {}
}

message SubscribePositionRequest {}
message PositionResponse {
    Position position = 1; // The next position
}

message SubscribeHomeRequest {}
message HomeResponse {
    Position home = 1; // The next home position
}

message SubscribeInAirRequest {}
message InAirResponse {
    bool is_in_air = 1; // The next 'in-air' state
}

message SubscribeLandedStateRequest {}
message LandedStateResponse {
    LandedState landed_state = 1;
}

message SubscribeArmedRequest {}
message ArmedResponse {
   bool is_armed = 1; // The next 'armed' state
}

message SubscribeAttitudeQuaternionRequest {}
message AttitudeQuaternionResponse {
    Quaternion attitude_quaternion = 1; // The next attitude (quaternion)
}

message SubscribeAttitudeEulerRequest {}
message AttitudeEulerResponse {
    EulerAngle attitude_euler = 1; // The next attitude (euler)
}

message SubscribeAttitudeAngularVelocityBodyRequest {}
message AttitudeAngularVelocityBodyResponse {
    AngularVelocityBody attitude_angular_velocity_body = 1; // The next angular velocity (rad/s)
}

message SubscribeCameraAttitudeQuaternionRequest {}
message CameraAttitudeQuaternionResponse {
    Quaternion attitude_quaternion = 1; // The next camera attitude (quaternion)
}

message SubscribeCameraAttitudeEulerRequest {}
message CameraAttitudeEulerResponse {
    EulerAngle attitude_euler = 1; // The next camera attitude (euler)
}

message SubscribeGroundSpeedNedRequest {}
message GroundSpeedNedResponse {
    SpeedNed ground_speed_ned = 1; // The next ground speed (NED)
}

message SubscribeGpsInfoRequest {}
message GpsInfoResponse {
    GpsInfo gps_info = 1; // The next 'GPS info' state
}

message SubscribeDistanceSensorRequest {}
message DistanceSensorResponse {
    DistanceSensor distance_sensor = 1;
}

message SubscribeImuReadingNedRequest {}
message ImuReadingNedResponse {
    ImuReadingNed imu_reading_ned = 1; // The next 'IMU reading (NED)' state
}

message SubscribeBatteryRequest {}
message BatteryResponse {
    Battery battery = 1; // The next 'battery' state
}

message SubscribeBatteryStatusRequest {}
message BatteryStatusResponse {
    BatteryStatus battery_status = 1; // The next 'battery current' state
}

message SubscribeFlightModeRequest {}
message FlightModeResponse {
    FlightMode flight_mode = 1; // The next flight mode
}

message SubscribeModeInfoRequest {}
message ModeInfoResponse {
    ModeInfo mode_info = 1; // The next modes
}

message SubscribeHealthRequest {}
message HealthResponse {
    Health health = 1; // The next 'health' state
}

message SubscribeRcStatusRequest {}
message RcStatusResponse {
    RcStatus rc_status = 1; // The next RC status
}

message SubscribeStatusTextRequest {}
message StatusTextResponse {
    StatusText status_text = 1; // The next 'status text'
}

message SubscribeActuatorControlTargetRequest {}
message ActuatorControlTargetResponse {
    ActuatorControlTarget actuator_control_target = 1; // Actuator control target
}

message SubscribeActuatorOutputStatusRequest {}
message ActuatorOutputStatusResponse {
    ActuatorOutputStatus actuator_output_status = 1; // Actuator output status
}

message SubscribeOdometryRequest {}
message OdometryResponse {
    Odometry odometry = 1; // Odometry
}

// Position type in global coordinates.
message Position {
    double latitude_deg = 1; // Latitude in degrees (range: -90 to +90)
    double longitude_deg = 2; // Longitude in degrees (range: -180 to +180)
    float absolute_altitude_m = 3; // Altitude AMSL (above mean sea level) in metres
    float relative_altitude_m = 4; // Altitude relative to takeoff altitude in metres
}

/*
 * Quaternion type.
 *
 * All rotations and axis systems follow the right-hand rule.
 * The Hamilton quaternion product definition is used.
 * A zero-rotation quaternion is represented by (1,0,0,0).
 * The quaternion could also be written as w + xi + yj + zk.
 *
 * For more info see: https://en.wikipedia.org/wiki/Quaternion
 */
message Quaternion {
    float w = 1; // Quaternion entry 0, also denoted as a
    float x = 2; // Quaternion entry 1, also denoted as b
    float y = 3; // Quaternion entry 2, also denoted as c
    float z = 4; // Quaternion entry 3, also denoted as d
}

/*
 * Euler angle type.
 *
 * All rotations and axis systems follow the right-hand rule.
 * The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
 *
 * For more info see https://en.wikipedia.org/wiki/Euler_angles
 */
message EulerAngle {
    float roll_deg = 1; // Roll angle in degrees, positive is banking to the right
    float pitch_deg = 2; // Pitch angle in degrees, positive is pitching nose up
    float yaw_deg = 3; // Yaw angle in degrees, positive is clock-wise seen from above
}

// Angular velocity type
message AngularVelocityBody {
    float roll_rad_s = 1; // Roll angular velocity
    float pitch_rad_s = 2; // Pitch angular velocity
    float yaw_rad_s = 3; // Yaw angular velocity
}

// Speed type, represented in the NED (North East Down) frame and in metres/second.
message SpeedNed {
    float velocity_north_m_s = 1; // Velocity in North direction in metres/second
    float velocity_east_m_s = 2; // Velocity in East direction in metres/second
    float velocity_down_m_s = 3; // Velocity in Down direction in metres/second
}

// GPS information type.
message GpsInfo {
    int32 num_satellites = 1; // Number of visible satellites in use
    FixType fix_type = 2; // Fix type
    double latitude_deg = 3; // Latitude in degrees (range: -90 to +90)
    double longitude_deg = 4; // Longitude in degrees (range: -180 to +180)
    float absolute_altitude_m = 5; // Altitude AMSL (above mean sea level) in metres
    float h_acc_m = 6; // Position uncertainty in metres
    float v_acc_m = 7; // Altitude uncertainty in metres
}

message AccelerationNed {
    float north_m_s2 = 1;
    float east_m_s2 = 2;
    float down_m_s2 = 3;
}

message AngularVelocityNed {
    float north_rad_s = 1;
    float east_rad_s = 2;
    float down_rad_s = 3;
}

message MagneticFieldNed {
   float north_gauss = 1;
   float east_gauss = 2;
   float down_gauss = 3;
}

message ImuReadingNed {
    AccelerationNed acceleration = 1;
    AngularVelocityNed angular_velocity = 2;
    MagneticFieldNed magnetic_field = 3;
    float abs_pressure_mbar = 4;
    float pressure_alt = 5;
    float temperature_deg_c = 6;
}

message DistanceSensor {
    float current_distance_m = 1;
}

// Fix type.
enum FixType {
    NO_GPS = 0; // No GPS connected
    NO_FIX = 1; // No position information, GPS is connected
    FIX_2D = 2; // 2D position
    FIX_3D = 3; // 3D position
    FIX_DGPS = 4; // DGPS/SBAS aided 3D position
    RTK_FLOAT = 5; // RTK float, 3D position
    RTK_FIXED = 6; // RTK Fixed, 3D position
}

// Battery type.
message Battery {
    float voltage_v = 1; // Voltage in volts
    float current_a = 2; // Current in Amps
    float remaining_percent = 3; // Estimated battery remaining (range: 0.0 to 1.0)
}


// Battery status type.
message BatteryStatus {
    float mah_consumed = 1; // Measured consumption since power on or reboot
}

/*
 * Flight modes.
 *
 * For more information about flight modes, check out
 * https://docs.px4.io/en/config/flight_mode.html.
 */
enum FlightMode {
    UNKNOWN = 0; // Mode not known
    READY = 1; // Armed and ready to take off
    TAKEOFF = 2; // Taking off
    HOLD = 3; // Holding (hovering in place (or circling for fixed-wing vehicles)
    MISSION = 4; // In mission
    RETURN_TO_LAUNCH = 5; // Returning to launch position (then landing)
    LAND = 6; // Landing
    OFFBOARD = 7; // In 'offboard' mode
    FOLLOW_ME = 8; // In 'follow-me' mode
    MANUAL = 9; // In 'Manual' mode
    ALTCTL = 10; // In 'Altitude Control' mode
    POSCTL = 11; // In 'Position Control' mode
    ACRO = 12; // In 'Acro' mode
    STABILIZED = 13; // In 'Stabilize' mode
    RATTITUDE = 14; // In 'Rattitude' mode
}

// Base & Custom Modes
message ModeInfo {
    uint32 base_mode = 1;  // uint8 flags
    uint32 custom_main_mode = 2; // uint8 custom main mode
    uint32 custom_sub_mode = 3; // uint8 custom sub
}

// Health type.
message Health {
    bool is_gyrometer_calibration_ok = 1; // True if the gyrometer is calibrated
    bool is_accelerometer_calibration_ok = 2; // True if the accelerometer is calibrated
    bool is_magnetometer_calibration_ok = 3; // True if the magnetometer is calibrated
    bool is_level_calibration_ok = 4; // True if the vehicle has a valid level calibration
    bool is_local_position_ok = 5; // True if the local position estimate is good enough to fly in 'position control' mode
    bool is_global_position_ok = 6; // True if the global position estimate is good enough to fly in 'position control' mode
    bool is_home_position_ok = 7; // True if the home position has been initialized properly
}

// Remote control status type.
message RcStatus {
    bool was_available_once = 1; // True if an RC signal has been available once
    bool is_available = 2; // True if the RC signal is available now
    float signal_strength_percent = 3; // Signal strength (range: 0 to 100)
}

// StatusText information type.
message StatusText {
    // Status types.
    enum StatusType {
        INFO = 0; // Information or other
        WARNING = 1; // Warning
        CRITICAL = 2; // Critical
    }

    StatusType type = 1; // Message type
    string text = 2; // MAVLink status message
}

message ActuatorControlTarget {
    int32 group = 1;
    repeated float controls = 2;
}

message ActuatorOutputStatus {
    uint32 active = 1;
    repeated float actuator = 2;
}

// Landed State enumeration
enum LandedState{
    LANDED_STATE_UNKNOWN = 0;
    LANDED_STATE_ON_GROUND = 1;
    LANDED_STATE_IN_AIR = 2;
    LANDED_STATE_TAKING_OFF = 3;
    LANDED_STATE_LANDING = 4;
}

// Odometry message type.
message Odometry {
    // Mavlink frame id
    enum MavFrame {
        UNDEF = 0;
        BODY_NED = 8; // Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
        VISION_NED = 16; // Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: north, y: east, z: down).
        ESTIM_NED = 18; // Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: north, y: east, z: down).
    }

    uint64 time_usec = 1; // Timestamp (0 to use Backend timestamp).
    MavFrame frame_id = 2; // Coordinate frame of reference for the pose data.
    MavFrame child_frame_id = 3;  // Coordinate frame of reference for the velocity in free space (twist) data.
    PositionBody position_body = 4; // Position.
    Quaternion q = 5; // Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
    SpeedBody speed_body = 6; // Linear speed (m/s).
    AngularVelocityBody angular_velocity_body = 7; // Angular speed (rad/s).
    Covariance pose_covariance = 8; // Pose cross-covariance matrix.
    Covariance velocity_covariance = 9; // Velocity cross-covariance matrix.
}

/* Covariance type.
 * Row-major representation of a 6x6 cross-covariance matrix
 * upper right triangle.
 * Set first to NaN if unknown.
 */
message Covariance {
    repeated float covariance_matrix = 1;
}

// Speed type, represented in the Body (X Y Z) frame and in metres/second.
message SpeedBody {
    float velocity_x_m_s = 1; // Velocity in X in metres/second
    float velocity_y_m_s = 2; // Velocity in Y in metres/second
    float velocity_z_m_s = 3; // Velocity in Z in metres/second
}

// Position type, represented in the Body (X Y Z) frame
message PositionBody {
    float x_m = 1; // X Position in metres.
    float y_m = 2; // Y Position in metres.
    float z_m = 3; // Z Position in metres.
}
